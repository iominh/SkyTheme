@import 'mixins';

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@include keyframes(fadeInDown) {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }

  100% {
    opacity: 1;
    transform: translateY(0px);
  }
}

@include keyframes(fadeInUp) {
  0% {
    opacity: 0;
    transform: translateY(5px);
  }
  100% {
    opacity: 1;
    transform: translateY(0px);
  }
}

@include keyframes(fadeIn) {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@include keyframes(fadeInAndOut) {
  0% {
    opacity: 0;
  }
  25% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@include keyframes(fadeInBlurOut) {
  0% {
    opacity: 0;
    @include filter(30px);
  }
  100% {
    opacity: 1;
    @include filter(0px);
  }
}

// material animation guidelines: accelerate then slow (ease-out is best easing function)

.fadeInDown {
  @include animation('fadeInDown 1s ease-out both');
}

.fadeInWithDelay {
  @include animation('fadeIn 1s ease-out both');
}

.fadeIn {
  @include animation('fadeInBlurOut 1s ease-out both');
}